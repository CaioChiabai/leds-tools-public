"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[4918],{6095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=n(4848),o=n(8453);const s={sidebar_position:1,title:"Component-Based Architectures"},i="Motivation",a={id:"spark/Architecture/Understanding the Generated Code Architecture/frontend/componentBasedArchitecture",title:"Component-Based Architectures",description:"Before proceeding with the explanation of the specific architectures implemented, we must introduce the component-based architecture.",source:"@site/docs/spark/Architecture/Understanding the Generated Code Architecture/frontend/0_componentBasedArchitecture.mdx",sourceDirName:"spark/Architecture/Understanding the Generated Code Architecture/frontend",slug:"/spark/Architecture/Understanding the Generated Code Architecture/frontend/componentBasedArchitecture",permalink:"/leds-tools-public/spark/Architecture/Understanding the Generated Code Architecture/frontend/componentBasedArchitecture",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Component-Based Architectures"},sidebar:"spark",previous:{title:"Java Architecture",permalink:"/leds-tools-public/spark/Architecture/Understanding the Generated Code Architecture/backend/Java"},next:{title:"Vue Plus Vuetfy",permalink:"/leds-tools-public/spark/Architecture/Understanding the Generated Code Architecture/frontend/vuePlusVuetfy"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Before proceeding with the explanation of the specific architectures implemented, we must introduce the component-based architecture."}),"\n",(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"motivation",children:"Motivation"})}),"\n",(0,r.jsx)(t.p,{children:"In the early days of the internet, web applications and websites were developed in a static manner, meaning with little to no dynamically generated pages. The holy trinity\u2014Hypertext Markup Language (HTML), Cascading Style Sheets (CSS), and JavaScript (JS)\u2014was not used with the concern that it should update on its own without the need for server-side preprocessing of the pages. Therefore, languages like Hypertext Preprocessor (PHP) were used in monolithic structures, linking the frontend with the database through preprocessing."}),"\n",(0,r.jsx)(t.p,{children:"As time passed, the internet grew in importance, and many devices, particularly smartphones, needed to access it. Due to differences in screen sizes and compatibility, in order for a person using a mobile device to access a website with quality, it was often necessary to reimplement parts of the business logic in the responsive modules of the system, greatly increasing development costs. Thus, a migration process began from the monolithic structure to the separation of the frontend and backend, where the latter is mostly configured as a REST API. With the formal division between backend and frontend, the creation of responsiveness for a website to work on both computers and mobile devices no longer influences business logic; everything is contained in a single place."}),"\n",(0,r.jsx)(t.p,{children:"There are various ways to develop a frontend, and due to the difficulty of working solely and exclusively with the holy trinity, there was still a need for preprocessing HTML. Additionally, pure HTML, CSS, and JS do not provide built-in, easy-to-use tools for code reuse. Therefore, there was a need for a resource or concept to address all of the aforementioned issues."}),"\n",(0,r.jsx)(t.h1,{id:"components-one-of-the-possible-solutions",children:"Components: One of the Possible Solutions"}),"\n",(0,r.jsx)(t.p,{children:"Several proposals have been made to meet the demands of frontend development. One of the most successful is the use of components. It\u2019s hard to say which tool implemented this feature first, but one of the most influential frameworks to adopt a component-based structure was React, which is still widely used today. Many other frameworks that came after React, such as Vue, Angular, and Next, also implement components, and all follow a very similar architecture. For this reason, we need to first understand the architecture from a general perspective before diving into specifics."}),"\n",(0,r.jsx)(t.h1,{id:"what-is-a-component",children:"What is a Component?"}),"\n",(0,r.jsx)(t.p,{children:"A component is essentially a reusable piece of code that expands into HTML within another section of HTML. This feature is typically implemented through an abstraction of HTML that is preprocessed and then returned as raw HTML."}),"\n",(0,r.jsx)(t.p,{children:"Let\u2019s take React as an example. In React, components are defined as the return value of a function, and that return is typically a string (or a JSX structure) containing HTML tags. Once a component function is defined, it can be imported into another file and used as if it were a native HTML tag within the return of another component."}),"\n",(0,r.jsx)(t.p,{children:"Here\u2019s a code example:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"File1.jsx"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"const ComponentName = () => {\r\n  return (\r\n    <>\r\n      <span>Hello World 1</span>\r\n      <span>Hello World 2</span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComponentName;\n"})}),"\n",(0,r.jsx)(t.p,{children:"File2.jsx"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'import ComponentName from "path/to/component/File1.jsx";\r\n\r\nconst OtherComponent = () => {\r\n  return (\r\n    <>\r\n      <ComponentName />\r\n    </>\r\n  );\r\n};\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Resulting HTML"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"<span>Hello World 1</span>\r\n<span>Hello World 2</span>\n"})}),"\n",(0,r.jsx)(t.p,{children:"This is how HTML is used in React. Now notice \u2014 every HTML code in React is used in the form of a component, meaning everything is a component."}),"\n",(0,r.jsx)(t.p,{children:"Despite that, there is an informal division among components. Typically, the term component refers to a piece of code that is reused across multiple parts of the project. However, there are also components that serve a specific, single purpose. These specific components are commonly referred to as pages, templates, or views \u2014 depending on the author\u2019s preference."}),"\n",(0,r.jsx)(t.h1,{id:"generalizing-the-architecture",children:"Generalizing the Architecture"}),"\n",(0,r.jsx)(t.p,{children:"With the foundational understanding of component-based architecture, all other architectures will generally follow a similar pattern regardless of the framework used. Typically, there is one folder for reusable components and another for pages, both located within a larger folder that contains the main source code files (usually named src in frameworks based on NodeJS)."}),"\n",(0,r.jsx)(t.p,{children:"In addition, there is always some form of HTML abstraction and a way to import components into one another."}),"\n",(0,r.jsx)(t.p,{children:"Other functionalities, such as route configuration, API communication, and so on, are more flexible\u2014although there are common implementation patterns and recommendations, they are not strictly defined."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);