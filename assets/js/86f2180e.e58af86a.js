"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[7127],{310:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var s=i(4848),r=i(8453);const t={sidebar_position:4,title:"Metamodel"},c=void 0,l={id:"made/metamodel",title:"Metamodel",description:'This metamodel defines the structure of a "Made" system, which consists of several key components used in project management, such as projects, teams, processes, backlogs, and timeboxes. Below is a breakdown of the elements and their relationships:',source:"@site/docs/made/4_metamodel.md",sourceDirName:"made",slug:"/made/metamodel",permalink:"/leds-tools-public/made/metamodel",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Metamodel"},sidebar:"made",previous:{title:"Instalation",permalink:"/leds-tools-public/made/installation"},next:{title:"Understanding the Language",permalink:"/leds-tools-public/made/lang"}},d={},o=[{value:"Model (Entry Point)",id:"model-entry-point",level:3},{value:"Components",id:"components",level:3},{value:"Supporting Packages",id:"supporting-packages",level:3},{value:"Project",id:"project",level:2},{value:"Identification Component",id:"identification-component",level:3},{value:"Description Component",id:"description-component",level:3},{value:"Team",id:"team",level:2},{value:"Team",id:"team-1",level:3},{value:"TeamMember",id:"teammember",level:3},{value:"Process",id:"process",level:2},{value:"ProcessType (Interface)",id:"processtype-interface",level:3},{value:"Process",id:"process-1",level:3},{value:"Activity",id:"activity",level:3},{value:"Task",id:"task",level:3},{value:"Interfaces and Inheritance",id:"interfaces-and-inheritance",level:3},{value:"ProcessType",id:"processtype",level:4},{value:"Backlog",id:"backlog",level:2},{value:"Backlog",id:"backlog-1",level:3},{value:"Epic",id:"epic",level:3},{value:"AtomicUserStory",id:"atomicuserstory",level:3},{value:"TaskBacklog",id:"taskbacklog",level:3},{value:"Process",id:"process-2",level:3},{value:"Activity",id:"activity-1",level:3},{value:"Interfaces and Inheritance",id:"interfaces-and-inheritance-1",level:3},{value:"BacklogItem",id:"backlogitem",level:4},{value:"TimeBox",id:"timebox",level:2},{value:"TimeBox",id:"timebox-1",level:3},{value:"Planning",id:"planning",level:3},{value:"Performed",id:"performed",level:3},{value:"PlanningItem",id:"planningitem",level:3},{value:"PerformedItem",id:"performeditem",level:3},{value:"TeamMember",id:"teammember-1",level:3},{value:"Epic",id:"epic-1",level:3},{value:"AtomicUserStory",id:"atomicuserstory-1",level:3},{value:"TaskBacklog",id:"taskbacklog-1",level:3},{value:"Interfaces and Inheritance",id:"interfaces-and-inheritance-2",level:2},{value:"TimeBoxTask",id:"timeboxtask",level:3}];function a(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:'This metamodel defines the structure of a "Made" system, which consists of several key components used in project management, such as projects, teams, processes, backlogs, and timeboxes. Below is a breakdown of the elements and their relationships:'}),"\n",(0,s.jsx)(n.mermaid,{value:"\r\nclassDiagram\r\n    class Model {\r\n        +Project project\r\n        +Team components*\r\n        +Process components*\r\n        +Backlog components*\r\n        +TimeBox components*\r\n    }\r\n    \r\n    class Project {\r\n        <<import>>\r\n    }\r\n\r\n    class Team {\r\n        <<import>>\r\n    }\r\n\r\n    class Process {\r\n        <<import>>\r\n    }\r\n\r\n    class Backlog {\r\n        <<import>>\r\n    }\r\n\r\n    class TimeBox {\r\n        <<import>>\r\n    }\r\n\r\n    class Helpers {\r\n        <<import>>\r\n    }\r\n\r\n    class Terminals {\r\n        <<import>>\r\n    }\r\n\r\n    Model --\x3e Project\r\n    Model --\x3e Team\r\n    Model --\x3e Process\r\n    Model --\x3e Backlog\r\n    Model --\x3e TimeBox\r\n    Model --\x3e Helpers\r\n    Model --\x3e Terminals\r\n\r\n"}),"\n",(0,s.jsx)(n.h3,{id:"model-entry-point",children:"Model (Entry Point)"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Model"})," serves as the main entry point for the grammar. It consists of one mandatory ",(0,s.jsx)(n.code,{children:"Project"})," and multiple optional components, which can include teams, processes, backlogs, and timeboxes."]}),"\n",(0,s.jsx)(n.h3,{id:"components",children:"Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Project"}),": A required element in the ",(0,s.jsx)(n.code,{children:"Model"}),", representing the central project that the other components relate to. This element is imported from the ",(0,s.jsx)(n.code,{children:"projects"})," package."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Team"}),": Represents teams working within the project. This is an optional component that can be added to the ",(0,s.jsx)(n.code,{children:"Model"})," and is imported from the ",(0,s.jsx)(n.code,{children:"team"})," package."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Process"}),": Represents processes within the project. Like teams, it is an optional component and is imported from the ",(0,s.jsx)(n.code,{children:"processes"})," package."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backlog"}),": Refers to the backlog of tasks or issues in the project. It is also optional and is imported from the ",(0,s.jsx)(n.code,{children:"backlog"})," package."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TimeBox"}),": Represents time-based elements like sprints or deadlines. It is an optional component imported from the ",(0,s.jsx)(n.code,{children:"timebox"})," package."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"supporting-packages",children:"Supporting Packages"}),"\n",(0,s.jsx)(n.p,{children:"The model also relies on some supporting packages, including:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Helpers"}),": A package for utility or supporting elements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Terminals"}),": Another supporting package, possibly used for defining basic terminal elements in the grammar."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"project",children:"Project"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Project"})," class defines the main entity, containing several key attributes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"name"}),": A string representing the name of the project."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"email"}),": A string for the email address associated with the project."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"host"}),": A string that represents the host where the project is located."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"token"}),": A string used for authentication or access within the project."]}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\r\n    class Project {\r\n        +STRING name\r\n        +STRING email\r\n        +STRING host\r\n        +STRING token\r\n    }\r\n    \r\n    class Identification {\r\n        <<import>>\r\n    }\r\n\r\n    class Description {\r\n        <<import>>\r\n    }\r\n\r\n    Project *-- Identification\r\n    Project *-- Description\r\n"}),"\n",(0,s.jsxs)(n.p,{children:["In addition to these attributes, the ",(0,s.jsx)(n.code,{children:"Project"})," class is linked to two important components:"]}),"\n",(0,s.jsx)(n.h3,{id:"identification-component",children:"Identification Component"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Identification"})," component represents a part of the project that is responsible for managing project identification. The details of this component are imported from external sources (",(0,s.jsx)(n.code,{children:"terminals"})," or ",(0,s.jsx)(n.code,{children:"helpers"}),"), and it is considered essential for the overall structure of the project."]}),"\n",(0,s.jsx)(n.h3,{id:"description-component",children:"Description Component"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Description"})," component handles descriptive information related to the project. Like the ",(0,s.jsx)(n.code,{children:"Identification"})," component, its details are imported from external sources, making it an integral part of the project structure."]}),"\n",(0,s.jsx)(n.h2,{id:"team",children:"Team"}),"\n",(0,s.jsxs)(n.p,{children:["This class diagram represents the structure of a Team Management system, focusing on the ",(0,s.jsx)(n.code,{children:"Team"})," and ",(0,s.jsx)(n.code,{children:"TeamMember"})," classes. It outlines the attributes of each class and the relationship between them."]}),"\n",(0,s.jsx)(n.mermaid,{value:'classDiagram\r\n    %% Main Classes\r\n    class Team {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Label\r\n        +STRING Description\r\n    }\r\n\r\n    class TeamMember {\r\n        +ID id\r\n        +STRING name\r\n        +STRING email\r\n        +STRING Label\r\n    }\r\n\r\n    %% Relationships\r\n    Team "1" --\x3e "*" TeamMember : has\r\n'}),"\n",(0,s.jsx)(n.h3,{id:"team-1",children:"Team"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"Team"})," class represents a group of individuals working together on a project or within an organization."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the team."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the team."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing or tagging the team."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A detailed description of the team's purpose, goals, or activities."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Has"}),": Contains multiple ",(0,s.jsx)(n.code,{children:"TeamMember"})," instances, indicating that a team comprises several members."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"teammember",children:"TeamMember"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"TeamMember"})," class represents an individual member of a team."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the team member."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": The name of the team member."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"email"}),": The email address of the team member."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing or tagging the team member (e.g., role, expertise)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Belongs To"}),": Part of one ",(0,s.jsx)(n.code,{children:"Team"}),", indicating that each team member is associated with a specific team."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"process",children:"Process"}),"\n",(0,s.jsxs)(n.p,{children:["This class diagram represents the structure of a Process Management system, encompassing key elements such as ",(0,s.jsx)(n.code,{children:"Process"}),", ",(0,s.jsx)(n.code,{children:"Activity"}),", and ",(0,s.jsx)(n.code,{children:"Task"}),". It also defines how these elements interact and depend on each other within the system."]}),"\n",(0,s.jsx)(n.mermaid,{value:'classDiagram\r\n    %% Interface for Process Types\r\n    class ProcessType {\r\n        <<interface>>\r\n    }\r\n\r\n    %% Main Classes\r\n    class Process {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING DefinitionReady\r\n        +STRING Learning\r\n        +STRING Label\r\n    }\r\n\r\n    class Activity {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING DefinitionReady\r\n        +STRING Learning\r\n        +STRING Label\r\n    }\r\n\r\n    class Task {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING DefinitionReady\r\n        +STRING Learning\r\n        +STRING Label\r\n    }\r\n\r\n    %% Relationships\r\n    Process "1" --\x3e "*" Activity : includes\r\n    Activity "1" --\x3e "*" Task : includes\r\n\r\n    %% Dependencies\r\n    Process "*" --\x3e "*" ProcessType : depends on\r\n    Activity "*" --\x3e "*" ProcessType : depends on\r\n    Task "*" --\x3e "*" ProcessType : depends on\r\n\r\n    %% Inheritance\r\n    Process --|> ProcessType\r\n    Activity --|> ProcessType\r\n    Task --|> ProcessType\r\n'}),"\n",(0,s.jsx)(n.h3,{id:"processtype-interface",children:"ProcessType (Interface)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"ProcessType"})," interface serves as a common type for all process-related elements (",(0,s.jsx)(n.code,{children:"Process"}),", ",(0,s.jsx)(n.code,{children:"Activity"}),", and ",(0,s.jsx)(n.code,{children:"Task"}),"). It allows these classes to be referenced polymorphically, enabling dependencies to be established between different types of process elements."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": Implemented by ",(0,s.jsx)(n.code,{children:"Process"}),", ",(0,s.jsx)(n.code,{children:"Activity"}),", and ",(0,s.jsx)(n.code,{children:"Task"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"process-1",children:"Process"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"Process"})," class represents a high-level process within the system. It can include multiple activities and has its own set of attributes that define its characteristics and state."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the process."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the process."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A detailed description of the process."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the process is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the process is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes or knowledge areas associated with the process."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the process."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Includes"}),": Contains multiple ",(0,s.jsx)(n.code,{children:"Activity"})," instances, indicating that a process comprises several activities."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"ProcessType"})," instances (",(0,s.jsx)(n.code,{children:"Process"}),", ",(0,s.jsx)(n.code,{children:"Activity"}),", ",(0,s.jsx)(n.code,{children:"Task"}),"), allowing for complex interdependencies between different process elements."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"activity",children:"Activity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"Activity"})," class represents a specific activity within a process. Activities break down a process into manageable tasks and can include multiple tasks themselves."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the activity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the activity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A detailed description of the activity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the activity is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the activity is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes or knowledge areas associated with the activity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the activity."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Includes"}),": Contains multiple ",(0,s.jsx)(n.code,{children:"Task"})," instances, indicating that an activity comprises several tasks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"ProcessType"})," instances (",(0,s.jsx)(n.code,{children:"Process"}),", ",(0,s.jsx)(n.code,{children:"Activity"}),", ",(0,s.jsx)(n.code,{children:"Task"}),"), allowing for dependencies between different activities and processes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"task",children:"Task"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"Task"})," class represents an individual task within an activity. Tasks are the smallest units of work and can depend on other tasks, activities, or processes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A detailed description of the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the task is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the task is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes or knowledge areas associated with the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the task."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"ProcessType"})," instances (",(0,s.jsx)(n.code,{children:"Process"}),", ",(0,s.jsx)(n.code,{children:"Activity"}),", ",(0,s.jsx)(n.code,{children:"Task"}),"), enabling dependencies between various tasks and other process elements."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"interfaces-and-inheritance",children:"Interfaces and Inheritance"}),"\n",(0,s.jsx)(n.h4,{id:"processtype",children:"ProcessType"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": An interface that is implemented by ",(0,s.jsx)(n.code,{children:"Process"}),", ",(0,s.jsx)(n.code,{children:"Activity"}),", and ",(0,s.jsx)(n.code,{children:"Task"}),". This allows these classes to be treated uniformly when establishing dependencies, enabling flexible and dynamic relationships within the process management system."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"backlog",children:"Backlog"}),"\n",(0,s.jsxs)(n.p,{children:["This class diagram represents the structure of a Backlog Management system, encompassing key elements such as ",(0,s.jsx)(n.code,{children:"Backlog"}),", ",(0,s.jsx)(n.code,{children:"Epic"}),", ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),", and ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),". Additionally, it integrates external components like ",(0,s.jsx)(n.code,{children:"Process"})," and ",(0,s.jsx)(n.code,{children:"Activity"})," to define relationships and dependencies among backlog items."]}),"\n",(0,s.jsx)(n.mermaid,{value:'classDiagram\r\n    %% Classes principais\r\n    class Backlog {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Label\r\n        +STRING Description\r\n    }\r\n\r\n    class Epic {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING replace\r\n        +STRING DefinitionReady\r\n        +STRING Label\r\n        +STRING Learning\r\n    }\r\n\r\n    class AtomicUserStory {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING DefinitionReady\r\n        +STRING Learning\r\n        +STRING Label\r\n    }\r\n\r\n    class TaskBacklog {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING DefinitionReady\r\n        +STRING Learning\r\n        +STRING Label\r\n    }\r\n\r\n    class Process {\r\n        <<import>>\r\n    }\r\n\r\n    class Activity {\r\n        <<import>>\r\n    }\r\n\r\n    %% Relacionamentos\r\n    Backlog "1" --\x3e "*" Epic : contains\r\n    Backlog "1" --\x3e "*" AtomicUserStory : contains\r\n    Backlog "1" --\x3e "*" TaskBacklog : contains\r\n\r\n    Epic "*" --\x3e "*" BacklogItem : depends\r\n    Epic "1" --\x3e "1" Process : associated with\r\n\r\n    AtomicUserStory "*" --\x3e "*" BacklogItem : depends\r\n    AtomicUserStory "1" --\x3e "1" Epic : part of\r\n    AtomicUserStory "1" --\x3e "1" Activity : associated with\r\n\r\n    TaskBacklog "*" --\x3e "*" BacklogItem : depends\r\n    TaskBacklog "1" --\x3e "1" AtomicUserStory : part of\r\n    TaskBacklog "1" --\x3e "1" TaskBacklog : sub-task of\r\n\r\n    %% Tipos e Heran\xe7a\r\n    class BacklogItem {\r\n        <<interface>>\r\n    }\r\n\r\n    Epic --|> BacklogItem\r\n    AtomicUserStory --|> BacklogItem\r\n    TaskBacklog --|> BacklogItem'}),"\n",(0,s.jsx)(n.h3,{id:"backlog-1",children:"Backlog"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"Backlog"})," class serves as the primary container for all backlog items."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the backlog."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the backlog."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the backlog."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A detailed description of the backlog."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Contains"}),": Holds multiple ",(0,s.jsx)(n.code,{children:"BacklogItem"})," instances, which can be ",(0,s.jsx)(n.code,{children:"Epic"}),", ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),", or ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"epic",children:"Epic"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": An ",(0,s.jsx)(n.code,{children:"Epic"})," represents a large body of work that can be broken down into smaller tasks or user stories."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the epic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the epic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A description of the epic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the epic is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"replace"}),": Indicates if the epic is replacing another item."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the epic is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the epic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes related to the epic."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"BacklogItem"})," instances."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Associated With"}),": Linked to one ",(0,s.jsx)(n.code,{children:"Process"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"atomicuserstory",children:"AtomicUserStory"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": An ",(0,s.jsx)(n.code,{children:"AtomicUserStory"})," represents the smallest functional unit within the backlog, typically focused on a user-centered functionality."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the user story."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the user story."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A description of the user story."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the user story is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the user story is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes related to the user story."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the user story."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"BacklogItem"})," instances."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Part Of"}),": Belongs to one ",(0,s.jsx)(n.code,{children:"Epic"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Associated With"}),": Linked to one ",(0,s.jsx)(n.code,{children:"Activity"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"taskbacklog",children:"TaskBacklog"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"TaskBacklog"})," class represents tasks that need to be completed as part of the project."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A description of the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the task is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the task is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes related to the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the task."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"BacklogItem"})," instances."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Part Of"}),": Belongs to one ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sub-Task Of"}),": Can be a sub-task of another ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"process-2",children:"Process"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Represents processes associated with epics."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": Imported from an external package."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"activity-1",children:"Activity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Represents activities associated with user stories."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": Imported from an external package."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"interfaces-and-inheritance-1",children:"Interfaces and Inheritance"}),"\n",(0,s.jsx)(n.h4,{id:"backlogitem",children:"BacklogItem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": An interface implemented by ",(0,s.jsx)(n.code,{children:"Epic"}),", ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),", and ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),", indicating that these classes are types of backlog items."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"timebox",children:"TimeBox"}),"\n",(0,s.jsxs)(n.p,{children:["This class diagram provides a comprehensive view of the TimeBox Management metamodel, illustrating how ",(0,s.jsx)(n.code,{children:"TimeBox"}),", ",(0,s.jsx)(n.code,{children:"Planning"}),", ",(0,s.jsx)(n.code,{children:"Performed"}),", ",(0,s.jsx)(n.code,{children:"PlanningItem"}),", and ",(0,s.jsx)(n.code,{children:"PerformedItem"})," interact and depend on each other. It integrates with existing components like ",(0,s.jsx)(n.code,{children:"TeamMember"}),", ",(0,s.jsx)(n.code,{children:"Epic"}),", ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),", and ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),", enabling structured planning and tracking of tasks within designated time frames. The use of the ",(0,s.jsx)(n.code,{children:"TimeBoxTask"})," interface facilitates flexible and dynamic dependencies among various task types, ensuring effective project management and progress monitoring."]}),"\n",(0,s.jsx)(n.mermaid,{value:'classDiagram\r\n    %% Interface for TimeBox Tasks\r\n    class TimeBoxTask {\r\n        <<interface>>\r\n    }\r\n\r\n    %% Main Classes\r\n    class TimeBox {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING startDate\r\n        +STRING endDate\r\n        +STRING comment\r\n        +STRING Label\r\n    }\r\n\r\n    class Planning {\r\n        +STRING planningItems\r\n    }\r\n\r\n    class Performed {\r\n        +STRING performedItems\r\n    }\r\n\r\n    class PlanningItem {\r\n        +STRING itemString\r\n        +STRING assigneeString\r\n        +INT planned\r\n        +INT complexity\r\n        +STRING dueDate\r\n    }\r\n\r\n    class PerformedItem {\r\n        +STRING itemString\r\n        +INT performed\r\n        +INT complexity\r\n        +STRING status\r\n    }\r\n\r\n    class TeamMember {\r\n        +ID id\r\n        +STRING name\r\n        +STRING email\r\n        +STRING Label\r\n    }\r\n\r\n    class Epic {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING replace\r\n        +STRING DefinitionReady\r\n        +STRING Label\r\n        +STRING Learning\r\n    }\r\n\r\n    class AtomicUserStory {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING DefinitionReady\r\n        +STRING Learning\r\n        +STRING Label\r\n    }\r\n\r\n    class TaskBacklog {\r\n        +ID id\r\n        +STRING Name\r\n        +STRING Description\r\n        +STRING DefinitionDone\r\n        +STRING DefinitionReady\r\n        +STRING Learning\r\n        +STRING Label\r\n    }\r\n\r\n    %% Relationships\r\n    TimeBox "1" --\x3e "1" Planning : has\r\n    TimeBox "1" --\x3e "1" Performed : has\r\n    TimeBox "1" --\x3e "*" TeamMember : responsible\r\n    TimeBox "1" --\x3e "*" PlanningItem : includes\r\n    TimeBox "1" --\x3e "*" PerformedItem : includes\r\n\r\n    Planning "1" --\x3e "*" PlanningItem : contains\r\n    Performed "1" --\x3e "*" PerformedItem : contains\r\n\r\n    PlanningItem --\x3e "0..1" TimeBoxTask : item\r\n    PlanningItem --\x3e "0..1" TeamMember : assignee\r\n\r\n    PerformedItem --\x3e "0..1" TimeBoxTask : item\r\n\r\n    %% Inheritance\r\n    Epic --|> TimeBoxTask\r\n    AtomicUserStory --|> TimeBoxTask\r\n    TaskBacklog --|> TimeBoxTask\r\n'}),"\n",(0,s.jsx)(n.h3,{id:"timebox-1",children:"TimeBox"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"TimeBox"})," class represents a fixed period during which specific tasks or activities are planned and performed. It serves as a container for planning and tracking the progress of tasks within the designated time frame."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the TimeBox."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the TimeBox."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A detailed description of the TimeBox."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"startDate"}),": The start date of the TimeBox."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"endDate"}),": The end date of the TimeBox."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"comment"}),": Additional comments or notes related to the TimeBox."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the TimeBox."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Has"}),": Contains one ",(0,s.jsx)(n.code,{children:"Planning"})," and one ",(0,s.jsx)(n.code,{children:"Performed"})," instance."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Responsible"}),": Assigned to multiple ",(0,s.jsx)(n.code,{children:"TeamMember"})," instances."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Includes"}),": Contains multiple ",(0,s.jsx)(n.code,{children:"PlanningItem"})," and ",(0,s.jsx)(n.code,{children:"PerformedItem"})," instances."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"planning",children:"Planning"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"Planning"})," class encapsulates the planning phase of a TimeBox, where various planning items are defined and organized."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"planningItems"}),": A collection of ",(0,s.jsx)(n.code,{children:"PlanningItem"})," instances associated with the TimeBox."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Contains"}),": Holds multiple ",(0,s.jsx)(n.code,{children:"PlanningItem"})," instances."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performed",children:"Performed"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"Performed"})," class encapsulates the execution phase of a TimeBox, where performed items are tracked and managed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"performedItems"}),": A collection of ",(0,s.jsx)(n.code,{children:"PerformedItem"})," instances associated with the TimeBox."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Contains"}),": Holds multiple ",(0,s.jsx)(n.code,{children:"PerformedItem"})," instances."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"planningitem",children:"PlanningItem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"PlanningItem"})," class represents individual items that are planned within a TimeBox. These items can be tasks, user stories, or epics that need to be addressed during the TimeBox period."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"itemString"}),": A string representation of the item, used if a reference is not provided."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"assigneeString"}),": A string representation of the assignee's name, used if a reference is not provided."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"planned"}),": An integer indicating the amount of effort planned for the item."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"complexity"}),": An integer representing the complexity level of the item."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dueDate"}),": The due date for the planned item."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Item"}),": References a ",(0,s.jsx)(n.code,{children:"TimeBoxTask"})," (",(0,s.jsx)(n.code,{children:"Epic"}),", ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),", or ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),") or uses a string if no reference is provided."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Assignee"}),": References a ",(0,s.jsx)(n.code,{children:"TeamMember"})," or uses a string if no reference is provided."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performeditem",children:"PerformedItem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"PerformedItem"})," class represents individual items that have been performed or completed within a TimeBox. These items track the actual progress made during the TimeBox period."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"itemString"}),": A string representation of the item, used if a reference is not provided."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"performed"}),": An integer indicating the amount of effort actually performed on the item."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"complexity"}),": An integer representing the complexity level of the item."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"status"}),": The current status of the item, which can be either ",(0,s.jsx)(n.code,{children:"DOING"})," or ",(0,s.jsx)(n.code,{children:"DONE"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Item"}),": References a ",(0,s.jsx)(n.code,{children:"TimeBoxTask"})," (",(0,s.jsx)(n.code,{children:"Epic"}),", ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),", or ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),") or uses a string if no reference is provided."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"teammember-1",children:"TeamMember"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"TeamMember"})," class represents an individual member of a team responsible for executing tasks within a TimeBox."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the team member."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": The name of the team member."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"email"}),": The email address of the team member."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing or tagging the team member (e.g., role, expertise)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Responsible For"}),": Assigned to multiple ",(0,s.jsx)(n.code,{children:"TimeBox"})," instances."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Assignee"}),": Can be assigned to multiple ",(0,s.jsx)(n.code,{children:"PlanningItem"})," instances."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"epic-1",children:"Epic"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"Epic"})," class represents a large body of work that can be broken down into smaller tasks or user stories. It is a type of ",(0,s.jsx)(n.code,{children:"TimeBoxTask"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the epic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the epic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A description of the epic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the epic is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"replace"}),": Indicates if the epic is replacing another item."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the epic is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the epic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes related to the epic."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"TimeBoxTask"})," instances."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Associated With"}),": Linked to one ",(0,s.jsx)(n.code,{children:"Process"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"atomicuserstory-1",children:"AtomicUserStory"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"AtomicUserStory"})," class represents the smallest functional unit within the backlog, typically focused on a user-centered functionality. It is a type of ",(0,s.jsx)(n.code,{children:"TimeBoxTask"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the user story."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the user story."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A description of the user story."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the user story is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the user story is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes related to the user story."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the user story."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"TimeBoxTask"})," instances."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Part Of"}),": Belongs to one ",(0,s.jsx)(n.code,{children:"Epic"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Associated With"}),": Linked to one ",(0,s.jsx)(n.code,{children:"Activity"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"taskbacklog-1",children:"TaskBacklog"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"TaskBacklog"})," class represents tasks that need to be completed as part of the project. It is a type of ",(0,s.jsx)(n.code,{children:"TimeBoxTask"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Attributes"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"}),": A unique identifier for the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Name"}),": The name of the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Description"}),": A description of the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionDone"}),": Criteria that define when the task is considered complete."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DefinitionReady"}),": Criteria that define when the task is ready to begin."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Learning"}),": Learning outcomes related to the task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Label"}),": A label used for categorizing the task."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Relationships"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depends On"}),": Can depend on multiple ",(0,s.jsx)(n.code,{children:"TimeBoxTask"})," instances."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Part Of"}),": Belongs to one ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sub-Task Of"}),": Can be a sub-task of another ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"interfaces-and-inheritance-2",children:"Interfaces and Inheritance"}),"\n",(0,s.jsx)(n.h3,{id:"timeboxtask",children:"TimeBoxTask"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": The ",(0,s.jsx)(n.code,{children:"TimeBoxTask"})," interface is implemented by ",(0,s.jsx)(n.code,{children:"Epic"}),", ",(0,s.jsx)(n.code,{children:"AtomicUserStory"}),", and ",(0,s.jsx)(n.code,{children:"TaskBacklog"}),". This allows these classes to be treated uniformly when establishing dependencies, enabling flexible and dynamic relationships within the TimeBox Management system."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var s=i(6540);const r={},t=s.createContext(r);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);